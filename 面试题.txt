第一部分 Python基础篇（80题）
1.为什么学习Python？
2.通过什么途径学习的Python？
3.Python和Java、PHP、C、C#、C++等其他语言的对比？
	Python：轻量级、易学、自由/开放源码软件、可移植性、支持面向对象、丰富的库、规范的代码。
	Java：优点：开源性，功能强大，库多
			 缺点：编译速度 比较慢，不完全
	PHP：优点：性能很强，配合简单，稳定，容易部署。
			 缺点：函数命名不规范，驼峰法和下划线，传参位置不一。
	C：    优点：能操纵底层，能细粒度优化性能。
			 缺点：1、是面向过程的，2、运行时类型检查不可用，3、不提供命名空间功能，4、构        
			 造函数和析构函数不可用。        
	C#：  优点： 强大的.NET Framework托管代码集合类，较简单的语言特性。WEB应用程序    
			 开发速度快。
			 缺点：底层和高性能不合适，Windows平台以外支持有限。
	C++: 优点：性能比较高，可进化型。
			 缺点： 难学，门槛高
4.简述解释型和编译型编程语言？
	解释型编程语言：
		当程序运行时，将代码一行一行的解释成二进制，再运行。
		优点：排错快，开发效率高，可以跨平台。
		缺点：执行效率相对低。
		典型：python
	编译型：
		将代码一次性全部编译成二进制，然后再运行。
		优点：执行效率高。
		缺点：排错慢，开发效率低，不能跨平台。
		典型：C
	java:编译型+解释型
5.Python解释器种类以及特点？
	CPython：
		我们从Python官方网站下载并安装好Python3.6后，就获得了一个官方版本的解释器Cpython。
		它是用C语言开发的。在命令行下运行python就是启动了Cpython解释器。
		它是使用最广的Python解释器。
	IPython:
		IPython是基于CPython之上的一个交互式解释器，它只是在交互方式上有所增强，但是
		执行Python代码的功能和CPython是完全一样的。
		CPython用>>>作为提示符，而IPython用In [序号]:作为提示符。
	PyPy:
		PyPy是另一个解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译
		(注意不是解释)，所以可以显著提高python代码的执行速度。
		绝大部分python代码都可以在PyPy下运行，但是会导致相同的python代码在两种解释器下执行
		可能有不同的结果。
	Jython：
		Jython是运行在Java平台上的python解释器，可以直接把python代码编译成Java字节码执行。
	IronPython:
		IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的python解释器，
		可以直接把python代码编译成.Net的字节码。
	小结：
		python的解释器很多，但使用最广泛的还是CPython,如果要和Java和.Net平台交互，最好的办法
		不是用Jython或IronPython，而是通过网络调用来交互，确保各程序间的独立性。
6.位和字节的关系？
	8bit = 1Byte
7.b、B、KB、MB、GB 的关系？
	1Byte = 8bit 
	1Kb = 1024Byte
	1Mb = 1024Kb
	1Gb = 1024Mb
	1Tb = 1024Gb
8.请至少列举5个 PEP8 规范（越多越好）。
	1,括号中使用垂直隐式缩进或使用悬挂缩进
		缩进  每级缩进用4个空格
	2,空格还是tab?
		1.空格是首选的缩进方法
		2.Tab仅仅在已经使用tab缩进的代码中为了保持一致性而使用。
		3.Python 3中不允许混合使用Tab和空格缩进。
		4.Python 2的包含空格与Tab和空格缩进的应该全部转为空格缩进。
		5.Python2命令行解释器使用-t选项时有非法混合Tab和空格的情况会告警。
		  当使用-tt警告提升为错误。强烈推荐这些选项！另外个人推荐pep8和autopep8模块。
	3,最大行宽
		限制所有行的最大行宽为79字符。
		文本长块，比如文档字符串或注释，行长度应限制为72个字符。
	4，空行
		两行空行分割顶层函数和类的定义。
		类的方法定义用单个空行分割。
		额外的空行可以必要的时候用于分割不同的函数组，但是要尽量节约使用。
		额外的空行可以必要的时候在函数中用于分割不同的逻辑块，但是要尽量节约使用。
		Python接 contol-L作为空白符；许多工具视它为分页符，这些要因编辑器而异。
	5. 源文件编码
		在核心Python发布的代码应该总是使用UTF-8(ASCII在Python 2)。
		ASCII文件(Python 2)或UTF-8(Python 3)不应有编码声明。
		标准库中非默认的编码应仅用于测试或当注释或文档字符串,比如包含非ASCII字符的作者姓名，尽量使用\x , \u , \U , or \N。
		Python 3.0及以后版本，PEP 3131可供参考，部分内容如下：在Python标准库必须使用ASCII标识符，
		并尽量只使用英文字母。此外字符串和注释也必须用ASCII。唯一的例外是：（a）测试非ASCII的功能，和（b）作者的名字不是拉丁字母。
	6，导入
		导入在单独行
		导入始终在文件的顶部，在模块注释和文档字符串之后，在模块全局变量和常量之前
	　　　　导入顺序如下：标准库进口,相关的第三方库，本地库。各组的导入之间要有空行。
	　　　　相关的all放在导入之后。
		推荐绝对路径导入，因为它们通常更可读，而且往往是表现更好的（或至少提供更好的错误消息）。
		禁止使用通配符导入
	7. 字符串的引用
		Python中单引号字符串和双引号字符串都是相同的。注意尽量避免在字符串中的反斜杠以提高可读性。
		根据PEP 257, 三个引号都使用双引号。
	8. 表达式和语句的空格
		括号里边避免空格
		逗号，冒号，分号之前避免空格
		索引操作中的冒号当作操作符处理前后要有同样的空格(一个空格或者没有空格，个人建议是没有)
	9. 注释
		与代码自相矛盾的注释比没注释更差。修改代码时要优先更新注释！
		注释是完整的句子。如果注释是断句，首字母应该大写，除非它是小写字母开头的标识符(永远不要修改标识符的大小写)。
		如果注释很短，可以省略末尾的句号。注释块通常由一个或多个段落组成。段落由完整的句子构成且每个句子应该以点号(后面要有两个空格)结束，并注意断词和空格。
		非英语国家的程序员请用英语书写你的注释，除非你120%确信代码永远不会被不懂你的语言的人阅读。
		注释块通常应用在代码前，并和这些代码有同样的缩进。每行以 '# '(除非它是注释内的缩进文本，注意#后面有空格)。注释块内的段落用仅包含单个 '#' 的行分割。
		慎用行内注释(Inline Comments) 节俭使用行内注释。 行内注释是和语句在同一行，至少用两个空格和语句分开。行内注释不是必需的，重复罗嗦会使人分心。
	10. 文档字符串
		docstring是一个字符串文字，作为模块，函数，类或方法定义中的第一个语句出现。这样的docstring成为该对象的__doc__特殊属性
		所有模块通常应该有文档，所有由模块导出的函数和类也应该有文档。公共方法（包括__init__构造函数）也应该有docstrings。软件包可能记录在软件包目录中的__init__.py文件的模块文档字符串中
		Python代码中其他地方出现的字符串文字也可以作为文档。它们不被Python字节码编译器识别，并且不能作为运行时对象属性（即未分配给__doc__）访问，但可以通过软件工具提取两种类型的额外文档字符串：
		在模块，类或__init__方法的顶级简单赋值之后立即出现的字符串文字被称为“属性文档字符串”
		在另一个文档字符串之后立即出现的字符串文字称为“其他文档字符串”
	11. 版本标签
		如果你必须在源文件中包含git、Subversion、CVS或RCS crud信息，放置在模块的文档字符串之后，任何其他代码之前，上下各用一个空行：
　　　　	__version__ = "$Revision$"# $Source$
	12. 命名约定
		b(单个小写字母)
		B(单个大写字母)
		lowercase(小写串)
		lower_case_with_underscores(带下划线的小写)
		UPPERCASE(大写串)
		UPPER_CASE_WITH_UNDERSCORES(带下划线的大写串)
		CapitalizedWords(首字母大写的单词串或驼峰缩写）
		注意: 使用大写缩写时，缩写使用大写字母更好。故 HTTPServerError 比 HttpServerError 更好
		mixedCase(混合大小写，第一个单词是小写)
		Capitalized_Words_With_Underscores（带下划线，首字母大写，丑陋）
9.通过代码实现如下转换：
	二进制转换成十进制：v = “0b1111011”
		v = '0b1111011'
		print(int(v,2)) #123
	十进制转换成二进制：v = 18
		v = 18
		print(bin(v)) #0b10010
	八进制转换成十进制：v = “011”
		v = '011'
		print(int(v,8))  #9
	十进制转换成八进制：v = 30 
		print(oct(30)) #0o36
	十六进制转换成十进制：v = “0x12” 
		print(int('0x12',16)) #18
	十进制转换成十六进制：v = 87
		print(hex(87)) #0x57

	x(二，八，十六)进制——》十进制  用内置函数int(转换对象,x)
	计算绝对值用abs
	返回除数，余数用divmod
	小数精确用round
	幂运算用pow
	最大值max，最小值min
10.请编写一个函数实现将IP地址转换成一个整数。
	def ip_func():
		ip_num = input('请输入IP地址')
		s = ''
		ip_list = ip_num.split('.')
		for i in ip_list:
			i = bin(int(i)).lstrip('0b') 
			if len(i)!=8:
				i = i.zfill(8)  
				s += i
		return int(s,2)
	print(ip_func())
	如 10.3.9.12 转换规则为：
	        10            00001010
	         3            00000011
	         9            00001001
	        12            00001100
	再将以上二进制拼接起来计算十进制结果：00001010 00000011 00001001 00001100 = ？
11.python递归的最大层数？
	def fun(n):
		n += 1
		print(n)
		fun(n)
	print(fun(1))
	998   官方文档1000
12.求结果：
	优先级：（）> not > and > or  
	X  or  Y   如果X True ,则return  X 否则  return  Y 
	and和or相反
	    v1 = 1 or 3   	#1
	    v2 = 1 and 3	#3
	    v3 = 0 and 2 and 1  #0
	    v4 = 0 and 2 or 1   #1
	    v5 = 0 and 2 or 1 or 4   #1 
	    v6 = 0 or Flase and 1    #Flase
13.ascii、unicode、utf-8、gbk区别？
	ascii:
		英:8位1个字节表示一个字符。
		中：1个字节表示1个字符。
	unicode：
		英：4个字节表示1个字符
		中：4个字节表示1个字符
	utf-8：
		英：1个字节表示1个字符
		欧：2个字节表示1个字符
		中：3个字节表示1个字符
	gbk：
		英：1个字节表示1个字符
		中：2个字节表示1个字符
14.字节码和机器码的区别？
	机器码：
		称为机器语言指令，有时也被称为原生码，是电脑CPU直接读取运行的机器指令，运行速称为机器语言指令，
		有时也被称为原生码，是电脑CPU直接读取运行的机器指令，运行速度称为机器语言指令，有时也被称为原生码，
		是电脑CPU直接读取运行的机器指令，运行速称为机器语言指令，有时也被称为原生码，是电脑CPU直接读取运行的机器指令，
		运行速度最快，但是非常晦涩难懂，比较难编写。
	字节码：
		字节码是一种中间状态（中间码）的二进制代码（文件）。需要直译器转译后才能成为机器码。
15.三元运算规则以及应用场景？
	三元运算符就是在赋值变量的时候，可以直接加判断，然后赋值
	格式：[on_true] if [expression] else [on_false]
	res = 值1 if 条件 else 值2
16.列举 Python2和Python3的区别？
	1,python2x:源码混乱，重复代码较多，冗余。
	  python3x:源码规范，崇尚优美清晰，简单
	  
	2,python2x:print()或print '内容'
	  python3x:print('内容')
	  
	3,python2x:默认编码ascii
	  python3x:编码utf-8
	  
	4,input
	  python2x:raw_input()
	  python3x:input()
	  
	5,python3x中有nonlocal，python2x中没有。
	
	6,整数的除法：
	  python2x:整数是强类型的。比如5/2 结果是2
	  python3x: 5/2  结果是2.5
	  
	7,Unicode：
	  python2x:前缀加u代表Unicode。
	  python3x:默认使用Unicode，如果想让3兼容2，可以通过字符串的前面保留‘u’来实现。
	8.python2中：unicode表示字符串
	  python3x中,表示字符串
	后续发展：
	PY3和PY2之间最大的区别不是在语法上，而是事实上PY2在2020年后将失去支持，
	PY3将继续开发更多的功能，和修复更多的错误。
17.用一行代码实现数值交换：
      a = 1
      b = 2
	a,b = b,a
18.Python3和Python2中 int和long的区别？
	python2有int和long类型。
	int类型最大值不能超过sys.maxint，而且这个最大值是平台相关的。
	可以通过在数字的末尾附上一个Ｌ来定义长整型，
	显然，它比int类型表示的数字范围更大。
	在python3里，只有一种整数类型int,大多数情况下，和python２中的长整型类似。
19.xrange和range的区别？
	1. range和xrange都是在循环中使用，输出结果一样。
	2. range返回的是一个list对象，而xrange返回的是一个生成器对象(xrange object)。
	3. xrange则不会直接生成一个list，而是每次调用返回其中的一个值，内存空间使用极少，因而性能非常好。
	注意：Python 3.x已经去掉xrange，全部用range代替。
20.文件操作时：xreadlines和readlines的区别？
	返回类型不同。xreadlines返回的是生成器，readlines返回的是列表
21.列举布尔值为False的常见值？
	0,'',[],{},()
22.字符串、列表、元组、字典每个常用的5个方法？
	见有道云笔记
23.lambda表达式格式以及应用场景？
	lambda x:x+2
	为了解决那些功能很简单的需求而设计的一句话函数
24.pass的作用？
	pass空语句，为了保证程序结构的完整性，一般用作占位语句
25.*arg和**kwarg作用
	*args 只接收实参对应的所有位置参数，并将其放在元祖中
	**args 只接收实参对应的所有关键字参数（无意义的），并将其放到一个字典中
	在函数定义时，*args,**kwargs代表的是聚合
26.is和==的区别
	is比较的是内存地址
		小数据池：节省内存
			int:-5~256
			str:含有特殊字符，不存在小数据池
				str(单个)*int int>20不存在小数据池
	== 比较的是数值
	= 是赋值
27.简述Python的深浅拷贝以及应用场景？
	浅拷贝：第一层创建的是新的内存地址，而从第二层开始指向的是同一个内存地址。
			所以，对于第二层以及更深层数保持一致性。
	深拷贝：两个是完全独立的，改变任意一个的任何元素（无论多少层）,都不发生改变。
	切片和浅拷贝是一样的作用。
	例子：
	l4 = [1, 2, [1, 2, 4], 4]
	l6 = l4.copy()
	l4[2].append(777)
	l5 = l6.append(8888)
	# l6.append(8888)只是对l6去添加数据，是一个动作，print(l6.append(8888))是None，故l5是None
	print(l4)   # [1, 2, [1, 2, 4, 777], 4]
	print(l5)  # None
	print(l6)  # [1, 2, [1, 2, 4, 777], 4, 8888]
28.Python垃圾回收机制？
	Python语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，
	该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用，
	『引用计数法』的原理是：每个对象维护一个ob_ref字段，用来记录该对象当前被引用的次数，
	每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，
	一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。
	它的缺点是需要额外的空间维护引用计数，这个问题是其次的，
	不过最主要的问题是它不能解决对象的“循环引用”，
	因此，也有很多语言比如Java并没有采用该算法做来垃圾的收集机制。

	无论何种垃圾收集机制, 一般都是两阶段: 垃圾检测和垃圾回收.

	在Python中, 大多数对象的生命周期都是通过对象的引用计数来管理的.

	问题: 但是存在循环引用的问题: a 引用 b, b 引用 a, 导致每一个对象的引用计数都不为0, 所占用的内存永远不会被回收

	要解决循环引用: 必需引入其他垃圾收集技术来打破循环引用. Python中使用了标记-清除以及分代收集

	即, Python 中垃圾回收机制: 引用计数(主要), 标记清除, 分代收集(辅助)

	引用计数
	引用计数, 意味着必须在每次分配和释放内存的时候, 加入管理引用计数的动作

	引用计数的优点: 最直观最简单, 实时性, 任何内存, 一旦没有指向它的引用, 就会立即被回收
	
	
	
	-- 引用计数
		-- Python为每个对象维护一个引用计数
		-- 当引用计数为0的 代表这个对象为垃圾
	-- 标记清除
		-- 解决孤立的循环引用
		-- 标记根节点和可达对象
		-- 不可达视为垃圾
	-- 分代回收
		-- 解决标记清除的效率问题
		-- 0代 1代 2代
		-- 阈值 （700,10,10）
		-- 当调用c的接口开辟内存和销毁内存的差值为700的时候出发0代回收
		-- 0代触发10次 触发1代回收
		-- 1代触发10次 触发2代回收
		-- 每次回收结束 没有被回收的对象放入下一代

29.Python的可变类型和不可变类型？
	可变类型:list,dict,set
	不可变数据类型:int,bool,str,tuple
30.求结果：
	   v = dict.fromkeys(['k1','k2'],[]) 
	   v[‘k1’].append(666)
	   print(v)    // {'k1':[666],'k2':[666]}
	   v[‘k1’] = 777   
	   print(v)		// {'k1':[777],'k2':[666]}
	列表是可迭代的，指向的是同一个内存地址
31.求结果：
	[6,6,6,6]
32.列举常见的内置函数？ 
	type()  range()  print() input()  eval()  hash() id() open()
	dir()  hasattr()  
33.filter、map、reduce的作用？
	filter 过滤出符合条件的元素
		res = filter(lambda x:x>2 ,[1,2,3])
		for i in res:
			print (i)  # 3
	map对指定序列做映射
		res = map(lambda x:x**2 ,[1,2,3])
		for i in res:
			print (i)  # 1  4  9
	reduce 对参数序列中元素进行累积
		from functools import reduce
		def add(x,y):
			return x + y
		ret = reduce(add,[1,2,3,4,5])
		print(ret)   # 1+2+3+4+5=15
		# 使用lambda函数
		ret = reduce(lambda x,y:x+y,[1,2,3,4,5])
		print(ret)  # 1+2+3+4+5=15
34.一行代码实现9*9乘法表
	print('\n'.join([' '.join(['{}*{}={}'.format(y,x,y*x) for y in range(1, x+1)]) for x in range(1,10)]))
35.如何安装第三方模块？以及用过哪些第三方模块？
	使用官方推荐的setuptools的包管理工具，或者用install,pip
	requests 模块
36.至少列举8个常用模块都有那些？
	time 时间模块
	os 提供操作系统的模块
	random 生成随机变量的模块
	re  正则表达式模块
	logging 记录日志的模块
	sys 用于提供对解释器相关的访问以及维护，并有很强的交互功能
	hashlib 用于加密相关的操作
	datetime date和time的结合体
37.re的match和search区别？
	match是在正则表达式中添加了一个'^',
	match和search一样，都是返回的结果对象，没找到返回None
	match 和search一样，从结果对象中取值都是用group
38.什么是正则的贪婪匹配？
	尽可能多的去匹配符合规则的字符
39.求结果： a. [ i % 2 for i in range(10) ] b. ( i % 2 for i in range(10) )
	a. [0,1,0,1,0,1,0,1,0,1]   b. 是生成器表达式 
40.求结果： 
	a. 1 or 2       1
	b. 1 and 2      2
	c. 1 < (2==2)   False
	d. 1 < 2 == 2   True    
41.def func(a,b=[]) 这种写法有什么坑？
	b是可变的数据类型，每次调用func,b都指向的是同一内存地址，都是调用的相同的b.
42.如何实现 “1,2,3” 变成 [‘1’,’2’,’3’] ?
	s = '1,2,3'
	print(s.split(','))
43.如何实现[‘1’,’2’,’3’]变成[1,2,3] ?
	print(list(map(lambda x:int(x),['1','2','3'])))
44.比较： a = [1,2,3] 和 b = [(1),(2),(3) ] 以及 b = [(1,),(2,),(3,) ] 的区别？
	a和b是一样的，列表里的元素都是整数，
	b列表里的元素是元祖
45.如何用一行代码生成[1,4,9,16,25,36,49,64,81,100] ?
	print([i**2 for i in range(1,11)])
46.一行代码实现删除列表中重复的值 ?
	print(list(set([1,2,2,3,5,6,6])))
47.如何在函数中设置一个全局变量 ?
	global 变量名      
48.logging模块的作用？以及应用场景？
	记录日志，做项目的时候打印日志，或者是异常
49.请用代码简答实现stack。
	class Stack():
		def __init__(self):
			self.items = []
		
		# 判断栈是否为空
		def is_empty(self):
			return self.items == []

		# 添加一个新的元素到栈顶
		def push(self,item):
			self.items.append(item)

		# 弹出栈顶元素
		def pop(self):
			return self.items.pop()
		
		# 返回栈顶元素
		def peek(self):
			return self.items[len(self.items)-1]
		
		# 返回栈的元素个数
		def size(self):
			return len(self.items)	
50.常用字符串格式化哪几种？
	% format f
51.简述 生成器、迭代器、可迭代对象 以及应用场景？
	可迭代对象：内部含有__iter__方法的对象
	迭代器：不仅含有__iter__，还含有__next__
	生成器：本质上是迭代器，需要yield关键字,一个列表推导式
	可迭代对象调用__iter__方法，生成了迭代器
52.用Python实现一个二分查找的函数。
	l2 = [1, 3, 6, 9, 10]
	def two_search(li,aim,start = 0,end = None):
		end = len(li)-1 if end is None else end
		mid_index = (end - start)// 2 + start
		if start <= end:
			if li[mid_index] < aim:
				return two_search(li,aim,start = mid_index+1,end = end)
			elif li[mid_index] > aim:
				return two_search(li,aim,start = start,end = mid_index-1)
			elif li[mid_index] == aim:
				return mid_index
			# else:                   
			#     return ('没有此值')
		else:
			return ('没有此值')
	print (two_search(l2,100))
53.谈谈你对闭包的理解？
	1、内层函数对外层函数变量的引用
	2、要return内层函数
	例子：
	name = 'wusir'
	def wraaper(n):
		  # 相当于n = 'wusir'
		def inner():
			print (n)
		inner()
	wraaper(name)
54.os和sys模块的作用？
	sys模块是和python解释器有关的
	os模块是和系统有关
55.如何生成一个随机数？
	利用random模块
	random.random() # 0-1随机小数
	random.uniform(1,3)  #大于1小于3的小数 
	
	random.randint(1,4) #大于等于1且小于等于4之间的整数
	random.randrange (1,2) #大于等于1且小于2之间的整数
	random.randrange (1,20,2)  #  大于等于1且小于20之间的奇数 
	
	random.choice([1,[1,2],5]) # 随机选择一个返回
	random.sample([1,(1,2),5],2)   # 随机选择多个返回，返回的个数为函数的第二个参数
56.如何使用python删除一个文件？
	os.remove()
57.谈谈你对面向对象的理解？
	面向对象三大特性：继承，封装，多态
	使用面向对象编程使得代码之间的关系更加明确，增强了代码的可扩展性
	继承：子类拥有父类的所有方法和属性，
        好处：抽取重复代码，减少代码冗余。
        坏处：耦合性太强。
	多态：对于不同的类可以有同名的方法，同名的方法应用到不同的类可以有不同行为。
58.Python面向对象中的继承有什么特点？
	1，在python3中，所有的类都会默认继承object类
	2，构造方法(__init__)需要在其派生类的构造方法中专门调用，即子类不会主动
		继承基类的构造方法。
	3，在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。
	   区别于在类中调用普通函数时并不需要带上self参数
	4，先在本类中查找需要调用的方法，找不到才去基类中找
	5，子类只继承父类所有公有的属性和方法，并且也可以在子类中通过父类名来调用，
		而对于私有的属性和方法，子类是不进行继承的，因此在子类中是无法通过父类名来访问的。
59.面向对象深度优先和广度优先是什么？
	深度优先：深度优先的模型，像是一条道走到黑，不撞南墙不回头的模式。
			  但是基于的模型，类似于堆栈模型。再撞到南墙的时候，回溯到上一次撞墙前的位置。
			  这样的的操作相当于stack的pop出最新入栈的那条数据。然后继续找一个之前没有走过的结点尝试。
	广度优先：保留全部节点，占用空间大；无回溯操作（既无入栈、出栈操作）、运行速度快。
60.面向对象中super的作用？
	在单继承中就是单纯的寻找父类
	在多继承中就是根据子节点 所在图 的 mro顺序找寻下一个类
61.是否使用过functools中的函数？其作用是什么？
	把一个函数的某些参数给固定住，返回一个新的函数，调用这个新函数会更简单。
62.列举面向对象中带爽下划线的特殊方法，如：__new__、__init__
	__new__ 创建对象的时候调用
	__init__ 实例化时
	__call__ 对象名() 相当于调用了类内置的__call__
	__str__  print打印一个对象时
	__doc__ 类的注释
	__getattr__ 调用属性不存在使触发
	__setattr__ 添加或修改属性时触发
	__delattr__ 删除属性时触发
	__delete__ 采用del删除属性时触发
63.如何判断是函数还是方法？
	函数可以直接调用，而方法和函数类似，也封装了独立的功能，但是
	方法是通过对象来调用。
64.静态方法和类方法区别？
	当一个方法用到了静态属性时，就是用类方法，类方法可以被类直接调用
	当一个方法既没有用到对象属性，也没有用到静态属性，就是用静态方法 
65.列举面向对象中的特殊成员以及应用场景
	__new__ 创建对象的时候调用
	__init__ 实例化时
	__call__ 对象名() 相当于调用了类内置的__call__
	__str__  print打印一个对象时
	__doc__ 类的注释
	__getattr__ 调用属性不存在使触发
	__setattr__ 添加或修改属性时触发
	__delattr__ 删除属性时触发
	__delete__ 采用del删除属性时触发
66.1、2、3、4、5 能组成多少个互不相同且无重复的三位数
	l = [1,2,3,4,5]
	l2 = []
	for i in l:
		for k in l:
			for v in l:
				if i!= k and i != v and k != v:
					l2.append('%s%s%s'%(i,k,v))
	print(len(l2))
67.什么是反射？以及应用场景？
	使用字符串数据类型的变量名来使用变量
	类使用类命名空间的名字： getattr(类名，'名字')     
    对象使用对象能用的方法和属性：getattr(对象名，'名字')
    模块使用模块中的名字：导入模块    getattr(模块名，'名字')
    从自己所在的模块中使用自己的名字：import  sys    
                                      getattr(sys.modules['__main__']，'名字')
68.metaclass作用？以及应用场景？
	metaclass是类的产生类，而并非继承类，
	通过它来控制类的产生，以及类实例化的操作。Wtform中实例化自定义form类是执行了其元类的__call__方法。
69.用尽量多的方法实现单例模式。
	#使用类
	class Singleton(object):
		_instance = None

		def __new__(cls, *args, **kwargs):
			if not cls._instance:
				cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)
				return cls._instance

	# 使用装饰器
	from functools import wraps

	def singleton(cls):
		instances = {}

		@wraps(cls)
		def getinstance(*args, **kwargs):
			if cls not in instances:
				instances[cls] = cls(*args, **kwargs)
				return instances[cls]

		return getinstance
	@singleton
	class MyClass(object):
		a = 1

	#使用元类
	class Singleton(type):
		_instances = {}
		def __call__(cls, *args, **kwargs):
			if cls not in cls._instances:
				cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
				return cls._instances[cls]
	class MyClass(metaclass=Singleton)
		pass
70.装饰器的写法以及应用场景。
	def wraaper(func):
		def inner(*args,**kwargs):
			# 执行函数前
			ret = func(*args,**kwargs)
			# 执行函数后
			return ret
		return inner
	
	@wrpper
	def f():
		print(111)
	f()
	应用场景：Django的csrf，缓存，Falsk中的许多装饰器
71.异常处理写法以及如何主动跑出异常（应用场景）
	try:
    """执行语句"""
	except: #异常类型
		"""触发异常后执行的语句"""
	finally:
		"""有没有异常都执行的语句"""
	主动抛异常 raise
72.什么是面向对象的mro
	方法查找的顺序
73.isinstance作用以及应用场景？
	isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。
	isinstance() 与 type() 区别：
		type() 不会认为子类是一种父类类型，不考虑继承关系。
		isinstance() 会认为子类是一种父类类型，考虑继承关系。
	如果要判断两个类型是否相同推荐使用 isinstance()。
74.写代码并实现：
Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would 
have exactly one solution, and you may not use the same element twice.
Example: 
          Given nums = [2, 7, 11, 15], target = 9,
            Because nums[0] + nums[1] = 2 + 7 = 9, 
           return [0, 1]

	nums = [2, 7, 11, 15]

	class Solution(object):
		def twoSum(self, nums, target):
			"""
			:param nums:  list[int]
			:param target:  int
			:return: List[int]
			"""
			if len(nums) <= 1:
				return False
			buff_dict = {}
			for i in range(len(nums)):
				if nums[i] in buff_dict:
					return [buff_dict[nums[i]], i]
				else:
					buff_dict[target - nums[i]] = i
75.json序列化时，可以处理的数据类型有哪些？如何定制支持datetime类型？
	数字 字符串 列表 字典 
	import json
	import datetime

	class MyEncoder(json.JSONEncoder):
		def default(self, o):  # o是数据类型
			if isinstance(o, datetime.datetime)
				return o.strftime('%Y-%m-%d')
			else:
				return super(MyEncoder, self).default(o)
76.json序列化时，默认遇到中文会转换成unicode，如果想要保留中文怎么办？
	设置ensure_ascii=False 
77.什么是断言？应用场景？
	断言条件为真时，代码继续执行，负责抛出异常，这个异常通常不会去捕获他，
	我们设置一个断言目的就是要求必须实现某个条件。
78.有用过with statement吗？它的好处是什么？
	文件操作时使用过，with语句下代码完成后调用求值语句返回对象的__exit__方法，
	可以实现一些操作，比如关闭文件。
79.使用代码实现查看列举目录下的所有文件。
	import os
	def check_file(sPath):
		for sChild in os.listdir(sPath):
			sChildPath = os.path.join(sPath,sChild)
			if os.path.isdir(sChildPath):
				check_file(sChildPath)
			else:
				print(sChildPath)
80.简述 yield和yield from关键字。
	yield：生成器函数关键字
	yield from：相当于 for i in obj ： yield i	
第二部分 网络编程和并发（34题）
1.简述 OSI 七层协议。
	应用层，表示层，会话层，传输层，网络层，数据链路层，物理层
2.什么是C/S和B/S架构？
	C/S即：Client与Server ，中文意思：客户端与服务器端架构，
	这种架构也是从用户层面（也可以是物理层面）来划分的。
	B/S即：Browser与Server,中文意思：浏览器端与服务器端架构，
	这种架构是从用户层面来划分的。
3.简述 三次握手、四次挥手的流程。
	1.第一次握手：
		Client将标志位SYN置为1，随机产生一个值seq=J，
		并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。
	2.第二次握手：
		Server收到数据包后由标志位SYN=1知道Client请求建立连接，
		Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，
		并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。
	3.第三次握手：
		Client收到确认后，检查ack是否为J+1，ACK是否为1，
		如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，
		Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，
		Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。
	1.第一次挥手：
		Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。
	2.第二次挥手：
		Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1
		（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。
	3.第三次挥手：
		Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。
	4.第四次挥手：
		Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，
		Server进入CLOSED状态，完成四次挥手。
4.什么是arp协议？
	根据IP地址获取物理地址的一个TCP/IP协议。
5.TCP和UDP的区别？
	TCP（Transmission Control Protocol）可靠的、面向连接的协议（eg:打电话）、
	传输效率低全双工通信（发送缓存&接收缓存）、面向字节流。
	使用TCP的应用：Web浏览器；电子邮件、文件传输程序。
	
	UDP（User Datagram Protocol）不可靠的、无连接的服务，传输效率高（发送前时延小），
	一对一、一对多、多对一、多对多、面向报文，尽最大努力服务，无拥塞控制。
	使用UDP的应用：域名系统 (DNS)；视频流；IP语音(VoIP)。
6.什么是局域网和广域网？
	局域网 ：
		局域网(Local Area Network)，简称LAN，是指在某一区域内由多台计算机互联成的计算机组。
		“某一区域”指的是同一办公室、同一建筑物、同一公司和同一学校等，一般是方圆几千米以内。
		局域网可以实现文件管理、应用软件共享、打印机共享、扫描仪共享、工作组内的日程安排、
		电子邮件和传真通信服务等功能。上网方式，因为局域网是封闭型的，可以由办公室内的两台计算机组成，
		也可以由一个公司内的上千台计算机组成。
	广域网：
		广域网(Wide Area Network)，简称WAN，是一种跨越大的、地域性的计算机网络的集合。
		通常跨越省、市，甚至一个国家。广域网包括大大小小不同的子网，子网可以是局域网，也可以是小型的广域网。
7.为何基于tcp协议的通信比基于udp协议的通信更可靠？
	tcp:可靠 对方给了确认收到信息，才发下一个，如果没收到确认信息就重发
	udp:不可靠 一直发数据，不需要对方回应
8.什么是socket？简述基于tcp协议的套接字通信流程。
	Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。
	在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，
	对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。
	
	服务端：创建socket对象，绑定ip端口bind(),  设置最大链接数listen(),  
			accept()与客户端的connect()创建双向管道， send(), recv(),close()
	客户端：创建socket对象，connect()与服务端accept()创建双向管道 ,  send(), recv(),close()
9.什么是粘包？ socket 中造成粘包的原因是什么？ 哪些情况会发生粘包现象？
	基于tcp协议出现的黏包现象，指的是：发送过来的一整条信息，由于server端没有及时接收，
	导致后来发送的数据和之前没有接收完的数据黏在了一起。
	
	TCP协议拆包机制，面向流的通信特点是无边界的。
	发送方引起的粘包是由TCP协议本身造成的，TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一个TCP段。
	若连续几次需要send的数据都很少，通常TCP会根据优化算法把这些数据合成一个TCP段后一次发送出去，
	这样接收方就收到了粘包数据。
	
	会出现黏包的两种情况：
		发送方的缓存机制
		接收方的缓存机制
10.IO多路复用的作用？
	I/O多路复用是通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），
	能够通知程序进行相应的读写操作。
11.什么是防火墙以及作用？
	简单的来说，防火墙就是一种，避免你的电脑被黑客入侵的一种防护工具，一种确保网络安全的方法！
	允许网络管理员定义一个中心点来防止非法用户进入内部网络。
	2．可以很方便地监视网络的安全性，并报警。
	3．可以作为部署NAT（Network Address Translation，网络地址变换）的地点，利用NAT技术，
	将有限的IP地址动态或静态地与内部的IP地址对应起来，用来缓解地址空间短缺的问题等
12.select、poll、epoll 模型的区别？
    1，select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。
	而epoll其实也需要调用 epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它是设备就绪时，
	调用回调函数，把就绪fd放入就绪链表中，并唤醒在 epoll_wait中进入睡眠的进程。虽然都要睡眠和交替，
	但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的 时候只要判断一下就绪链表是否为空就行了，
	这节省了大量的CPU时间。这就是回调机制带来的性能提升。
	2，select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，
	而epoll只要 一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，
	注意这里的等待队列并不是设备等待队列，只是一个epoll内 部定义的等待队列）。这也能节省不少的开销。
13.简述 进程、线程、协程的区别 以及应用场景？
	
14.GIL锁是什么鬼？
15.Python中如何使用线程池和进程池？
16.threading.local的作用？
17.进程之间如何进行通信？
18.什么是并发和并行？
19.进程锁和线程锁的作用？
20.解释什么是异步非阻塞？
21.路由器和交换机的区别？
22.什么是域名解析？
23.如何修改本地hosts文件？
24.生产者消费者模型应用场景及优势？
25.什么是cdn？
26.LVS是什么及作用？
27.Nginx是什么及作用？
28.keepalived是什么及作用?
29.haproxy是什么以及作用？
30.什么是负载均衡？
31.什么是rpc及应用场景？
32.简述 asynio模块的作用和应用场景。
33.简述 gevent模块的作用和应用场景。
34.twisted框架的使用和应用？
第三部分 数据库和缓存（46题）
1.列举常见的关系型数据库和非关系型都有那些？
2.MySQL常见数据库引擎及比较？
3.简述数据三大范式？
4.什么是事务？MySQL如何支持事务？
5.简述数据库设计中一对多和多对多的应用场景？
6.如何基于数据库实现商城商品计数器？
7.常见SQL（必备）
详见武沛齐博客：https://www.cnblogs.com/wupeiqi/articles/5729934.html
8.简述触发器、函数、视图、存储过程？
9.MySQL索引种类
10.索引在什么情况下遵循最左前缀的规则？
11.主键和外键的区别？
12.MySQL常见的函数？
13.列举 创建索引但是无法命中索引的8种情况。
14.如何开启慢日志查询？
15.数据库导入导出命令（结构+数据）？
16.数据库优化方案？
17.char和varchar的区别？
18.简述MySQL的执行计划？
19.在对name做了唯一索引前提下，简述以下区别：  
        select * from tb where name = ‘Oldboy-Wupeiqi’   
        select * from tb where name = ‘Oldboy-Wupeiqi’ limit 1
20.1000w条数据，使用limit offset 分页时，为什么越往后翻越慢？如何解决？
21.什么是索引合并？
22.什么是覆盖索引？
23.简述数据库读写分离？
24.简述数据库分库分表？（水平、垂直）
25.redis和memcached比较？
26.redis中数据库默认是多少个db 及作用？
27.python操作redis的模块？
28.如果redis中的某个列表中的数据量非常大，如果实现循环显示每一个值？
29.redis如何实现主从复制？以及数据同步机制？
30.redis中的sentinel的作用？
31.如何实现redis集群？
32.redis中默认有多少个哈希槽？
33.简述redis的有哪几种持久化策略及比较？
34.列举redis支持的过期策略。
35.MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中都是热点数据？ 
36.写代码，基于redis的列表实现 先进先出、后进先出队列、优先级队列。
37.如何基于redis实现消息队列？
38.如何基于redis实现发布和订阅？以及发布订阅和消息队列的区别？
39.什么是codis及作用？
40.什么是twemproxy及作用？
41.写代码实现redis事务操作。
42.redis中的watch的命令的作用？
43.基于redis如何实现商城商品数量计数器？
44.简述redis分布式锁和redlock的实现机制。
45.什么是一致性哈希？Python中是否有相应模块？
46.如何高效的找到redis中所有以oldboy开头的key？
第四部分 前端、框架和其他（155题）
1.谈谈你对http协议的认识。
2.谈谈你对websocket协议的认识。
3.什么是magic string ？
4.如何创建响应式布局？
5.你曾经使用过哪些前端框架？
	vue,
6.什么是ajax请求？并使用jQuery和XMLHttpRequest对象实现一个ajax请求。
7.如何在前端实现轮训？
8.如何在前端实现长轮训？
9.vuex的作用？
	vuex是一个专门为Vue.js设计的集中式状态管理架构。
	状态？ 我们把它理解为在data中需要共享给其他组件使用的部分。
	Vuex和单纯的全局对象有以下不同：
	1、Vuex 的状态存储是响应式的。当vue组件从store中读取状态的时候，
	　　若store中的状态发生变化，那么相应的组件也会相应的得到高效更新。
	2、你不能直接改变store中的状态。改变store中的状态的唯一途径就是显示的
	　　提交(commit)mutation。这样使得我们可以方便的跟踪每一个状态的变化，
	　　从而让我们能够实现一些工具来帮助我们更好的了解我们的应用。
10.vue中的路由的拦截器的作用？

11.axios的作用？
	基于Promise的HTTP请求客户端，可以同时在浏览器和node.js使用。
12.列举vue的常见指令。
	-- v-text
		-- innerText
	-- v-html
		-- innerHtml
	-- v-for
		-- key 
	-- v-if
		-- appendChild
	-- v-on 
		-- 绑定事件
	-- v-bind
		-- 绑定属性
	-- v-show
		-- display
	-- v-model
		-- input
		-- select
		-- textarea
	-- 指令修饰符
		-- .lazy
		-- .number
		-- .trim
		-- .stop
	-- 自定义的指令
		-- Vue.directive("指令的名称", function(el, bindding){})
			-- el 绑定指令的标签元素
			-- bindding 指令相关的所有信息
				-- bindding.value 指令的值
				-- bindding.modifiers 指令的修饰符
	-- 计算属性
		-- computed(){}
		-- 放入内存 只有数据改变的时候才会执行重新计算
	-- 获取DOM
		-- 给标签绑定ref属性
		-- this.$refs.xxxx
13.简述jsonp及实现原理？
	JSONP就是用来解决跨域请求问题的。
	ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，
	利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，
	这样实现了跨域。
14.是什么cors ？
15.列举Http请求中常见的请求方式？
	options,head,put,get,post,delete
16.列举Http请求中的状态码？
	100——客户必须继续发出请求
	101——客户要求服务器根据请求转换HTTP协议版本
	200——交易成功
	201——提示知道新文件的URL
	202——接受和处理、但处理未完成
	203——返回信息不确定或不完整
	204——请求收到，但返回信息为空
	205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件
	206——服务器已经完成了部分用户的GET请求
	300——请求的资源可在多处得到
	301——删除请求数据
	302——在其他地址发现了请求数据
	303——建议客户访问其他URL或访问方式
	304——客户端已经执行了GET，但文件未变化
	305——请求的资源必须从服务器指定的地址得到
	306——前一版本HTTP中使用的代码，现行版本中不再使用
	307——申明请求的资源临时性删除
	400——错误请求，如语法错误
	401——请求授权失败
	402——保留有效ChargeTo头响应
	403——请求不允许
	404——没有发现文件、查询或URl
	405——用户在Request-Line字段定义的方法不允许
	406——根据用户发送的Accept拖，请求资源不可访问
	407——类似401，用户必须首先在代理服务器上得到授权
	408——客户端没有在用户指定的饿时间内完成请求
	409——对当前资源状态，请求不能完成
	410——服务器上不再有此资源且无进一步的参考地址
	411——服务器拒绝用户定义的Content-Length属性请求
	412——一个或多个请求头字段在当前请求中错误
	413——请求的资源大于服务器允许的大小
	414——请求的资源URL长于服务器允许的长度
	415——请求资源不支持请求项目格式
	416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段
	417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求
	500——服务器产生内部错误
	501——服务器不支持请求的函数
	502——服务器暂时不可用，有时是为了防止发生系统过载
	503——服务器过载或暂停维修
	504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长
	505——服务器不支持或拒绝支请求头中指定的HTTP版本
17.列举Http请求中常见的请求头？
	请求头：
	accept:浏览器通过这个头告诉服务器，它所支持的数据类型
	Accept-Charset: 浏览器通过这个头告诉服务器，它支持哪种字符集
	Accept-Encoding：浏览器通过这个头告诉服务器，支持的压缩格式
	Accept-Language：浏览器通过这个头告诉服务器，它的语言环境
	Host：浏览器通过这个头告诉服务器，想访问哪台主机
	If-Modified-Since: 浏览器通过这个头告诉服务器，缓存数据的时间
	Referer：浏览器通过这个头告诉服务器，客户机是哪个页面来的  防盗链
	Connection：浏览器通过这个头告诉服务器，请求完后是断开链接还是何持链接
	
	响应头
	Location: 服务器通过这个头，来告诉浏览器跳到哪里
	Server：服务器通过这个头，告诉浏览器服务器的型号
	Content-Encoding：服务器通过这个头，告诉浏览器，数据的压缩格式
	Content-Length: 服务器通过这个头，告诉浏览器回送数据的长度
	Content-Language: 服务器通过这个头，告诉浏览器语言环境
	Content-Type：服务器通过这个头，告诉浏览器回送数据的类型
	Refresh：服务器通过这个头，告诉浏览器定时刷新
	Content-Disposition: 服务器通过这个头，告诉浏览器以下载方式打数据
	Transfer-Encoding：服务器通过这个头，告诉浏览器数据是以分块方式回送的
	Expires: -1  控制浏览器不要缓存
	Cache-Control: no-cache  
	Pragma: no-cache   
18.看图写结果：

19.看图写结果：

20.看图写结果：

21.看图写结果：
 
22.看图写结果：

23.看图写结果：

24.django、flask、tornado框架的比较？
25.什么是wsgi？
	WSGI:
		web服务器网关接口,是一套协议。用于接收用户请求并将请求进行初次封装，然后将请求交给web框架
		实现wsgi协议的模块：
			1.wsgiref,本质上就是编写一个socket服务端，用于接收用户请求(django)
			2.werkzeug,本质上就是编写一个socket服务端，用于接收用户请求(flask)
	uwsgi:
		与WSGI一样是一种通信协议，它是uWSGI服务器的独占协议,用于定义传输信息的类型
	uWSGI:
		是一个web服务器,实现了WSGI协议,uWSGI协议,http协议,
26.django请求的生命周期？
	1.wsgi,请求封装后交给web框架 （Flask、Django）     
	2.中间件，对请求进行校验或在请求对象中添加其他相关数据，例如：csrf、request.session     - 
	3.路由匹配 根据浏览器发送的不同url去匹配不同的视图函数    
	4.视图函数，在视图函数中进行业务逻辑的处理，可能涉及到：orm、templates => 渲染     - 
	5.中间件，对响应的数据进行处理。 
	6.wsgi,将响应的内容发送给浏览器。
27.列举django的内置组件？
	1.Admin是对model中对应的数据表进行增删改查提供的组件
	2.model组件：负责操作数据库
	3.form组件：1.生成HTML代码2.数据有效性校验3校验信息返回并展示
	4.ModelForm组件即用于数据库操作,也可用于用户请求的验证
28.列举django中间件的5个方法？以及django中间件的应用场景？
	1.process_request : 请求进来时,权限认证
	2.process_view : 路由匹配之后,能够得到视图函数
	3.process_exception : 异常时执行
	4.process_template_responseprocess : 模板渲染时执行
	5.process_response : 请求有响应时执行
29.简述什么是FBV和CBV？
	FBV和CBV本质是一样的
	基于函数的视图叫做FBV，基于类的视图叫做CBV
	在python中使用CBV的优点：
	1.提高了代码的复用性，可以使用面向对象的技术，比如Mixin（多继承）
	2.可以用不同的函数针对不同的HTTP方法处理，而不是通过很多if判断，提高代码可读性
30.django的request对象是在什么时候创建的？
	class WSGIHandler(base.BaseHandler):
		request = self.request_class(environ)
	请求走到WSGIHandler类的时候，执行__cell__方法，将environ封装成了request
31.如何给CBV的程序添加装饰器？
	引入method_decorator模块
	1.直接在类上加装饰器
	@method_decorator(test,name='dispatch')
	class Loginview(View):
		pass
	2.直接在处理的函数前加装饰器
	@method_decorator(test)
		def post(self,request,*args,**kwargs):pass
32.列举django orm 中所有的方法（QuerySet对象的所有方法）
	<1> all():                  查询所有结果 
	<2> filter(**kwargs):       它包含了与所给筛选条件相匹配的对象。获取不到返回None
	<3> get(**kwargs):          返回与所给筛选条件相匹配的对象，返回结果有且只有一个。获取不到会报错
								如果符合筛选条件的对象超过一个或者没有都会抛出错误。
	<4> exclude(**kwargs):      它包含了与所给筛选条件不匹配的对象
	<5> order_by(*field):       对查询结果排序
	<6> reverse():              对查询结果反向排序 
	<8> count():                返回数据库中匹配查询(QuerySet)的对象数量。 
	<9> first():                返回第一条记录 
	<10> last():                返回最后一条记录 
	<11> exists():              如果QuerySet包含数据，就返回True，否则返回False
	<12> values(*field):        返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系 model的实例化对象，而是一个可迭代的字典序列
	<13> values_list(*field):   它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列
	<14> distinct():            从返回结果中剔除重复纪录	
33.only和defer的区别？
	only:从数据库中只取指定字段的内容
	defer：指定字段的内容不被检索
34.select_related和prefetch_related的区别？
	有外键存在时，可以很好的减少数据库请求的次数,提高性能
	select_related通过多表join关联查询,一次性获得所有数据,只执行一次SQL查询
	prefetch_related分别查询每个表,然后根据它们之间的关系进行处理,执行两次查询
35.filter和exclude的区别？
	取到的值都是QuerySet对象,filter选择满足条件的,exclude:排除满足条件的.
36.列举django orm中三种能写sql语句的方法。
	1.使用execute执行自定义的SQL
	2.使用extra方法 
	3.使用raw方法
		1.执行原始sql并返回模型
		2.依赖model多用于查询
37.django orm 中如何设置读写分离？
	1.手动读写分离:通过.using(db_name)来指定要使用的数据库
	2.自动读写分离:
		1.定义类：如Router
		2.配置Router
			settings.py中指定DATABASE_ROUTERS
			DATABASE_ROUTERS = ['myrouter.Router',] 
	提高读的性能：多配置几个数据库,并在读取时,随机选取。写的时候写到主库
	实现app之间的数据库分离：分库分表
38.F和Q的作用?
	F:对数据本身的不同字段进行操作 如:比较和更新
	Q：用于构造复杂的查询条件 如：& |操作
39.values和values_list的区别？
	values : 取字典的queryset
	values_list : 取元组的queryset
40.如何使用django orm批量创建数据？
	bulk_create()
	objs=[models.Book(title="图书{}".format(i+15)) for i in range(100)]
	models.Book.objects.bulk_create(objs)
41.django的Form和ModeForm的作用？
	Form作用：
		1.在前端生成HTML代码
		2.对数据作有效性校验
		3.返回校验信息并展示
	ModeForm：根据模型类生成From组件,并且可以操作数据库
42.django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新。
	1.重写构造函数
		def def __init__(self, *args, **kwargs):
				super().__init__(*args, **kwargs)
				self.fields["city"].widget.choices = models.City.objects.all().values_list("id", "name")
	2.利用ModelChoiceField字段,参数为queryset对象
43.django的Model中的ForeignKey字段中的on_delete参数有什么作用？
	删除关联表中的数据时,当前表与其关联的field的操作
	django2.0之后，表与表之间关联的时候,必须要写on_delete参数,否则会报异常
44.django中csrf的实现机制？
	第一步：django第一次响应来自某个客户端的请求时,后端随机产生一个token值，把这个token保存在SESSION状态中;
			同时,后端把这个token放到cookie中交给前端页面；
	第二步：下次前端需要发起请求（比如发帖）的时候把这个token值加入到请求数据或者头信息中,一起传给后端；
			Cookies:{csrftoken:xxxxx}
	第三步：后端校验前端请求带过来的token和SESSION里的token是否一致；	
45.django如何实现websocket？
46.基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf token？
	1.后端将csrftoken传到前端，发送post请求时携带这个值发送
	data: {
				 csrfmiddlewaretoken: '{{ csrf_token }}'
			},
	2.获取form中隐藏标签的csrftoken值，加入到请求数据中传给后端
	 data: {
			 csrfmiddlewaretoken:$('[name="csrfmiddlewaretoken"]').val()
			 },
	3.cookie中存在csrftoken,将csrftoken值放到请求头中
	headers:{ "X-CSRFtoken":$.cookie("csrftoken")}，
47.django中如何实现orm表中添加数据时创建一条日志记录。
48.django缓存如何设置？
49.django的缓存能使用redis吗？如果可以的话，如何配置？
	1.安装 pip install django-redis
	2.在stting中配置CACHES,可以设置多个缓存,根据名字使用
			CACHES = {
				"default": {
					"BACKEND": "django_redis.cache.RedisCache",
					"LOCATION": "redis://127.0.0.1:6379",
					"OPTIONS": {
						"CLIENT_CLASS": "django_redis.client.DefaultClient",
						"CONNECTION_POOL_KWARGS": {"max_connections": 100}
						# "PASSWORD": "密码",
					}
				}
			},
			#另添加缓存
			"JERD": { }
	3.根据名字去连接池中获取连接
			from django_redis import get_redis_connection
			conn = get_redis_connection("default")
50.django路由系统中name的作用？
	用于反向解析路由,相当于给url取个别名，只要这个名字不变,即使对应的url改变
	通过该名字也能找到该条url
51.django的模板中filter和simple_tag的区别？
	 自定义filter：{{ 参数1|filter函数名:参数2 }}
		1.可以与if标签来连用
		2.自定义时需要写两个形参
	 simple_tag:{% simple_tag函数名 参数1 参数2 %}
		1.可以传多个参数,没有限制
		2.不能与if标签来连用
52.django-debug-toolbar的作用？
	1.是django的第三方工具包,给django扩展了调试功能
	包括查看sql语句,db查询次数,request,headers等
53.django中如何实现单元测试？
54.解释orm中 db first 和 code first的含义？
	数据持久化的方式：
	db first基于已存在的数据库,生成模型
	code first基于已存在的模型,生成数据库库
55.django中如何根据数据库表生成model中的类？
	1.在settings中设置要连接的数据库
	2.生成model模型文件
	python manage.py inspectdb
	3.模型文件导入到models中
		python manage.py inspectdb > app/models.py
56.使用orm和原生sql的优缺点？
	1.orm的开发速度快,操作简单。使开发更加对象化
	  执行速度慢。处理多表联查等复杂操作时,ORM的语法会变得复杂
	2.sql开发速度慢,执行速度快。性能强
57.简述MVC和MTV
	MVC软件系统分为三个基本部分：模型(Model)、视图(View)和控制器(Controller)
	Model：负责业务对象与数据库的映射(ORM)
	View：负责与用户的交互
	Control：接受用户的输入调用模型和视图完成用户的请求
	Django框架的MTV设计模式借鉴了MVC框架的思想,三部分为：Model、Template和View
	Model(模型)：负责业务对象与数据库的对象(ORM)
	Template(模版)：负责如何把页面展示给用户
	View(视图)：负责业务逻辑，并在适当的时候调用Model和Template
	此外,Django还有一个urls分发器,
	它将一个个URL的页面请求分发给不同的view处理,view再调用相应的Model和Template
58.django的contenttype组件的作用？
	这个组件保存了项目中所有app和model的对应关系,每当我们创建了新的model并执行数据库迁移后，
	ContentType表中就会自动新增一条记录.当一张表和多个表FK关联,并且多个FK中只能选择其中一个或其中n个时,可以利用contenttypes
59.谈谈你对restfull 规范的认识？
	首先restful是一种软件架构风格或者说是一种设计风格，并不是标准，它只是提供了一组设计#原则和约束条件，主要用于客户端和服务器交互类的软件。     
	就像设计模式一样，并不是一定要遵循这些原则，而是基于这个风格设计的软件可以更简洁，更#有层次，我们可以根据开发的实际情况，做相应的改变。
	它里面提到了一些规范，例如：
	1.restful 提倡面向资源编程,在url接口中尽量要使用名词，不要使用动词             
	2、在url接口中推荐使用Https协议，让网络接口更加安全
	https://www.bootcss.com/v1/mycss？page=3
	（Https是Http的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，
	因此加密的详细内容就需要SSL（安全套接层协议））                          
	3、在url中可以体现版本号
	https://v1.bootcss.com/mycss
	不同的版本可以有不同的接口，使其更加简洁，清晰             
	4、url中可以体现是否是API接口 
	https://www.bootcss.com/api/mycss            
	5、url中可以添加条件去筛选匹配
	https://www.bootcss.com/v1/mycss？page=3             
	6、可以根据Http不同的method，进行不同的资源操作
	（5种方法：GET / POST / PUT / DELETE / PATCH）             
	7、响应式应该设置状态码
	8、有返回值，而且格式为统一的json格式             
	9、返回错误信息
	返回值携带错误信息             
	10、返回结果中要提供帮助链接，即API最好做到Hypermedia
	如果遇到需要跳转的情况 携带调转接口的URL
		　　ret = {
				code: 1000,
				data:{
				id:1,
				name:'小强',
				depart_id:http://www.luffycity.com/api/v1/depart/8/
				}
		}
60.接口的幂等性是什么意思？
	1.是系统的接口对外一种承诺(而不是实现)
	2.承诺只要调用接口成功,外部多次调用对系统的影响都是一致的,不会对资源重复操作
61.什么是RPC？
	远程过程调用 (RPC) 是一种协议，程序可使用这种协议向网络中的另一台计算机上的程序请求服务
	1.RPC采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。
	2.首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。
	2.在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，
	3.最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。
62.Http和Https的区别？
	HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），
		  用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。
	HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，
		   因此加密的详细内容就需要SSL。
	HTTPS和HTTP的区别主要如下：
	　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。
	　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。
	　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
	　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，
			比http协议安全。
63.为什么要使用django rest framework框架？
	能自动生成符合 RESTful 规范的 API
	1.在开发REST API的视图中，虽然每个视图具体操作的数据不同，
	但增、删、改、查的实现流程基本一样,这部分的代码可以简写
	2.在序列化与反序列化时，虽然操作的数据不同，但是执行的过程却相似,这部分的代码也可以简写
	REST framework可以帮助简化上述两部分的代码编写，大大提高REST API的开发速度
64.django rest framework框架中都有那些组件？
	1.序列化组件:serializers  对queryset序列化以及对请求数据格式校验
	2.路由组件routers 进行路由分发
	3.视图组件ModelViewSet  帮助开发者提供了一些类，并在类中提供了多个方法
	4.认证组件 写一个类并注册到认证类(authentication_classes)，在类的的authticate方法中编写认证逻
	5.权限组件 写一个类并注册到权限类(permission_classes)，在类的的has_permission方法中编写认证逻辑。 
	6.频率限制 写一个类并注册到频率类(throttle_classes)，在类的的allow_request/wait 方法中编写认证逻辑
	7.解析器  选择对数据解析的类，在解析器类中注册(parser_classes)
	8.渲染器 定义数据如何渲染到到页面上,在渲染器类中注册(renderer_classes)
	9.分页  对获取到的数据进行分页处理, pagination_class
	10.版本  版本控制用来在不同的客户端使用不同的行为
	在url中设置version参数，用户请求时候传入参数。在request.version中获取版本，根据版本不同 做不同处理 
65.django rest framework框架中的视图都可以继承哪些类？
	class View(object):
	class APIView(View): 封装了view,并且重新封装了request,初始化了各种组件
	class GenericAPIView(views.APIView):
	1.增加了一些属性和方法,如get_queryset,get_serializer
	class GenericViewSet(ViewSetMixin, generics.GenericAPIView)
	父类ViewSetMixin 重写了as_view,返回return csrf_exempt(view)
	并重新设置请求方式与执行函数的关系
	class ModelViewSet(mixins.CreateModelMixin,
					   mixins.RetrieveModelMixin,
					   mixins.UpdateModelMixin,
					   mixins.DestroyModelMixin,
					   mixins.ListModelMixin,
					   GenericViewSet):pass
	继承了mixins下的一些类,封装了list,create,update等方法
	和GenericViewSet
66.简述 django rest framework框架的认证流程。
	1.用户请求走进来后,走APIView,初始化了默认的认证方法
	2.走到APIView的dispatch方法,initial方法调用了request.user
	3.如果我们配置了认证类,走我们自己认证类中的authentication方法
67.django rest framework如何实现的用户访问频率控制？
	使用IP/用户账号作为键，每次的访问时间戳作为值，构造一个字典形式的数据，存起来，每次访问时对时间戳列表的元素进行判断，
	把超时的删掉，再计算列表剩余的元素数就能做到频率限制了 
	匿名用户：使用IP控制，但是无法完全控制，因为用户可以换代理IP登录用户：使用账号控制，但是如果有很多账号，也无法限制
68.Flask框架的优势？
69.Flask框架依赖组件？
70.Flask蓝图的作用？
71.列举使用过的Flask第三方组件？
72.简述Flask上下文管理流程?
73.Flask中的g的作用？
74.Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？
75.为什么要Flask把Local对象中的的值stack 维护成一个列表？
76.Flask中多app应用是怎么完成？
77.在Flask中实现WebSocket需要什么组件？
78.wtforms组件的作用？
79.Flask框架默认session处理机制？
80.解释Flask框架中的Local对象和threading.local对象的区别？
81.Flask中 blinker 是什么？
82.SQLAlchemy中的 session和scoped_session 的区别？
83.SQLAlchemy如何执行原生SQL？
84.ORM的实现原理？
85.DBUtils模块的作用？
86.以下SQLAlchemy的字段是否正确？如果不正确请更正：
1
2
3
4
5
6
7
8
9
10	
11	from datetime import datetime
 from sqlalchemy.ext.declarative
import declarative_base
 from sqlalchemy import Column, Integer, String, DateTime
  
Base = declarative_base()  
class UserInfo(Base):    
    __tablename__ = 'userinfo'    
    id = Column(Integer, primary_key=True, autoincrement=True) 
    name = Column(String(64), unique=True) 
    ctime = Column(DateTime, default=datetime.now())
87.SQLAchemy中如何为表设置引擎和字符编码？
88.SQLAchemy中如何设置联合唯一索引？
89.简述Tornado框架的特点。
90.简述Tornado框架中Future对象的作用？
91.Tornado框架中如何编写WebSocket程序？
92.Tornado中静态文件是如何处理的？ 如： <link href="{{static_url("commons.css")}}" rel="stylesheet" />
93.Tornado操作MySQL使用的模块？
94.Tornado操作redis使用的模块？
95.简述Tornado框架的适用场景？
96.git常见命令作用：
97.简述以下git中stash命令作用以及相关其他命令。
98.git 中 merge 和 rebase命令 的区别。
99.公司如何基于git做的协同开发？
100.如何基于git实现代码review？
101.git如何实现v1.0 、v2.0 等版本的管理？
102.什么是gitlab？
103.github和gitlab的区别？
104.如何为github上牛逼的开源项目贡献代码？
105.git中 .gitignore文件的作用?
106.什么是敏捷开发？
107.简述 jenkins 工具的作用?
108.公司如何实现代码发布？
109.简述 RabbitMQ、Kafka、ZeroMQ的区别？
110.RabbitMQ如何在消费者获取任务后未处理完前就挂掉时，保证数据不丢失？
111.RabbitMQ如何对消息做持久化？
112.RabbitMQ如何控制消息被消费的顺序？
113.以下RabbitMQ的exchange type分别代表什么意思？如：fanout、direct、topic。
114.简述 celery 是什么以及应用场景？
115.简述celery运行机制。
116.celery如何实现定时任务？
117.简述 celery多任务结构目录？
118.celery中装饰器 @app.task 和 @shared_task的区别？
119.简述 requests模块的作用及基本使用？
120.简述 beautifulsoup模块的作用及基本使用？
121.简述 seleninu模块的作用及基本使用?
122.scrapy框架中各组件的工作流程？
123.在scrapy框架中如何设置代理（两种方法）？
124.scrapy框架中如何实现大文件的下载？
125.scrapy中如何实现限速？
126.scrapy中如何实现暂定爬虫？
127.scrapy中如何进行自定制命令？
128.scrapy中如何实现的记录爬虫的深度？
129.scrapy中的pipelines工作原理？
130.scrapy的pipelines如何丢弃一个item对象？
131.简述scrapy中爬虫中间件和下载中间件的作用？
132.scrapy-redis组件的作用？
133.scrapy-redis组件中如何实现的任务的去重？
134.scrapy-redis的调度器如何实现任务的深度优先和广度优先？
135.简述 vitualenv 及应用场景?
136.简述 pipreqs 及应用场景？
137.在Python中使用过什么代码检查工具？
138.简述 saltstack、ansible、fabric、puppet工具的作用？
139.B Tree和B+ Tree的区别？
140.请列举常见排序并通过代码实现任意三种。
141.请列举常见查找并通过代码实现任意三种。
142.请列举你熟悉的设计模式？
143.有没有刷过leetcode？
144.列举熟悉的的Linux命令。
145.公司线上服务器是什么系统？
146.解释 PV、UV 的含义？
147.解释 QPS的含义？
148.uwsgi和wsgi的区别？
149.supervisor的作用？
150.什么是反向代理？
151.简述SSH的整个过程。
152.有问题都去那些找解决方案？
153.是否有关注什么技术类的公众号？
154.最近在研究什么新技术？
155.是否了解过领域驱动模型？
 
统计：80 + 34 + 46 + 155 = 315题
 
暂时就先这样吧。我想能看到这里的同学，无外乎两种人：来拷贝题的人 和 来拷贝题的人。
但，在拷贝走的时候，你要想清楚一件事，把题拷走之后有个蛋用，搞明白答案对你来说才是最重要的。
好了，就酱紫。
 
老铁，这要是都赞，说不过去吧！！！
 
